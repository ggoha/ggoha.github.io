<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Тег: Rollbar | Иногда я делаю сайты]]></title>
  <link href="http://ggoha.github.io/blog/categories/rollbar/atom.xml" rel="self"/>
  <link href="http://ggoha.github.io/"/>
  <updated>2016-12-06T16:51:33+03:00</updated>
  <id>http://ggoha.github.io/</id>
  <author>
    <name><![CDATA[ggoha]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Удаление ошибок роутинга из Rollbar]]></title>
    <link href="http://ggoha.github.io/blog/2016/12/02/udalieniie-oshibok-routingha-iz-rollbar/"/>
    <updated>2016-12-02T15:35:35+03:00</updated>
    <id>http://ggoha.github.io/blog/2016/12/02/udalieniie-oshibok-routingha-iz-rollbar</id>
    <content type="html"><![CDATA[<p><a href="https://rollbar.com/">Rollbar</a> - замечательный инструмент для ловли ошибок на production, он избавляет от необходимости grep-ать логи и представляет сообщения об ошибках в крайне удобной форме и с массой полезной информации. К тому же он имеет бесплатное ограничение в 5000 ошибок, поэтому постараемся уменьшить количество ошибок долетающих до Rollbar</p>

<!-- more -->


<h2>Rollbar</h2>

<p>Данный пост посвящен не столь rollbar, сколько исправлению ошибок роутинга, но, возможно, я исправлю это упущение</p>

<h2>No route matches [GET] &ldquo;/ffhnzushqco.html&rdquo;</h2>

<p>Вот такого рода запросы частенько сыплются на мой сервер.
<img src="/images/rollbar.png"></p>

<p>Их цель естественно понятна, но все равно забавно наблюдать зоопарк запросов и бразузеров многие из которых упрямо стучатся на admin.php и /wordpress
Для обработки таких ошибок добавим им корректную обработку в роутинге.
В самый конец <strong>routes.rb</strong> добавим обработку всех остальных случаев, которые не нашли совпадения с прописанным нами роутингом.
<figure class='code'><figcaption><span>routes.rb</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="n">match</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="o">*</span><span class="n">a</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;,</span> <span class="ss">to</span><span class="p">:</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">application</span><span class="c1">#page_404&amp;rsquo;, via: [:get, :post]</span>
</span></code></pre></td></tr></table></div></figure>
Так же при желании можно ловить и delete, и put, и path.
В контролере пропишем
<figure class='code'><figcaption><span>application_controller.rb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'>  <span class="k">def</span> <span class="nf">page_404</span>
</span><span class='line'>    <span class="n">render</span> <span class="ss">file</span><span class="p">:</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="c1">#{Rails.root}/public/404.html&amp;rdquo;, layout: false, status: 404</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>
Мы успешно обработали все неизвестные запросы.</p>

<h2>Дополнительно</h2>

<p>Совсем терять эти ошибки не хочется, кроме мусора там попадаются, например, ошибки получения картинок с нашего сайта, что необходимо исправлять. Как вариант, предлагается записывать все такие обращения просто в файл.
Для этого изменим наш контроллер
<figure class='code'><figcaption><span>application_controller.rb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'>  <span class="k">def</span> <span class="nf">page_404</span>
</span><span class='line'>    <span class="no">File</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="c1">#{Rails.root}/log/404.log&amp;rdquo;, &amp;lsquo;a&amp;rsquo;) { |file| file.write(&amp;ldquo;#{request.original_url}\n&amp;rdquo;) }</span>
</span><span class='line'>    <span class="n">render</span> <span class="ss">file</span><span class="p">:</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="c1">#{Rails.root}/public/404.html&amp;rdquo;, layout: false, status: 404</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>
Здесь мы открываем файл на дозапись и сохраняет адрес страницы, которую мы не можем найти. Кроме того, чтобы этот файл не перезатирался при деплое, он сохраняется в log.</p>

<p>Чтобы Capistrano не перезатирал папки при деплое
<figure class='code'><figcaption><span>example deploy.rb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="o">&amp;</span><span class="n">hellip</span><span class="p">;</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:linked_dirs</span><span class="p">,</span>  <span class="sx">%w{bin log tmp/pids tmp/cache tmp/sockets vendor/bundle public/system}</span>
</span><span class='line'><span class="o">&amp;</span><span class="n">hellip</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></p>
]]></content>
  </entry>
  
</feed>
